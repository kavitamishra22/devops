
Challenge #1
A 3-tier environment is a common setup. Use a tool of your choosing/familiarity create these
resources on a cloud environment (Azure/AWS/GCP). Please remember we will not be judged
on the outcome but more focusing on the approach, style and reproducibility.



Ans.  3-tier architecture typically consists of:

Presentation Tier: The user interface. This could be a web application hosted on web servers.
Logic Tier: This is the application's core, where processing happens. It usually includes application servers and possibly a queuing service for asynchronous tasks.
Data Tier: Where data is stored and retrieved. This usually means databases, but could also involve other storage solutions, cache layers, etc.
Let's create these resources on AWS, as it's one of the most widely-used cloud platforms:

1. Presentation Tier:
Amazon EC2 (Elastic Compute Cloud): Launch EC2 instances with a web server (like Nginx or Apache).

Navigate to the EC2 dashboard in the AWS Management Console.
Click on "Launch Instance".
Choose an AMI (Amazon Machine Image) like Amazon Linux or Ubuntu.
Choose an instance type (e.g., t2.micro for free tier).
Configure security groups to allow inbound traffic on port 80 (HTTP) and 443 (HTTPS).
Launch the instance.
Install a web server (e.g., sudo yum install nginx for Amazon Linux).
Start the web server.

2. Logic Tier:
AWS Lambda: For serverless compute. You can also use EC2 or ECS (Elastic Container Service) based on your requirements.

Navigate to the AWS Lambda dashboard.
Click on "Create Function".
Define the function (give it a name, choose a runtime like Node.js or Python).
Write or upload your business logic.
Adjust the timeout and memory based on your requirements.
Deploy the function.

3. Data Tier:
Amazon RDS (Relational Database Service): For a relational database.

Navigate to the RDS dashboard.
Click on "Create database".
Choose a database type (MySQL, PostgreSQL, etc.).
Configure the database (DB instance type, storage, etc.).
Set up the security group to allow inbound traffic from your Logic Tier resources.
Launch the database instance.


NOTE:
Always set up your VPC (Virtual Private Cloud) to keep resources in private subnets when possible and only expose necessary ports/services.
Consider using Amazon CloudFront or another CDN (Content Delivery Network) for the presentation layer to cache content closer to users and reduce load times.
Security: Use IAM roles and security groups effectively to ensure that only necessary permissions are granted and only necessary ports are open.
Set up monitoring, alarms, and logging using services like Amazon CloudWatch to keep track of resource health and performance.
The above steps are a basic outline. In a real-world scenario, there would be additional considerations for scalability, redundancy, deployment automation, and continuous integration/continuous deployment (CI/CD).




